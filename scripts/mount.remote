#!/bin/bash
###############################################################################
# mount.remote - A script to mount GDrive remote and local storage
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

########## CONFIGURATION ##########
. "INSERT_CONFIG_FILE"
###################################


###############################################################################
# FUNCTIONS
###############################################################################
check_permissions () {
        if grep -qs $local_media_dir /proc/mounts; then
                echo "[ $(date ${date_format}) ]" Already mounted, not checking permissions
        else
        # Make sure local directories are owned by user
                uname2="$(stat --format '%u' "$cloud_decrypt_dir")"
                if [ $gid != $uname2 ];then
                        echo "[ $(date ${date_format}) ]" $cloud_decrypt_dir was owned by $uname2, changing ownership to "$uid".
                        sudo  chown -R "$uid":"$gid" $cloud_decrypt_dir
                fi
                uname2="$(stat --format '%u' "$local_media_dir")"
                if [ $gid != $uname2 ];then
                        echo "[ $(date ${date_format}) ]" $local_media_dir was owned by $uname2, changing ownership to "$uid".
                        sudo  chown -R "$uid":"$gid" $local_media_dir
                fi
        fi
}

mount_plexdrive () {
	cloud_dir="${cloud_encrypt_dir}"
	if [ "$encrypt_media" -eq "0" ]; then
		cloud_dir="${cloud_decrypt_dir}"
	fi

	# Make sure GD mountpoint exists.
	if [ ! -d "${cloud_dir}" ]; then
		mkdir -p "${cloud_dir}"
	fi

	# Make sure Plexdrive temp folder exists.
	if [ ! -d "${plexdrive_temp_dir}" ]; then
		mkdir -p "${plexdrive_temp_dir}"
	fi

	mongo="--mongo-database=${mongo_database} --mongo-host=${mongo_host}"
	if [ ! -z "${mongo_user}" -a "${mongo_user}" != " " ]; then
		mongo="${mongo} --mongo-user=${mongo_user} --mongo-password=${mongo_password}"
	fi

	# Mount GD if not already mounted.
	if ! mountpoint -q "$cloud_dir" ; then
		sleep 5
		count=5
		while [ $(ps -ef | grep "mongo" | grep -v "grep" | wc -l) == "0" ]
		do
			if [ "$count" == "0" ]; then
				echo "[ $(date ${date_format}) ] Could not connect to Mongodb. Please make sure Mongodb is running before mounting"
				echo "[ $(date ${date_format}) ] Mount failed"
				exit 02
			fi

			echo "[ $(date ${date_format}) ] Could not connect to Mongodb. Retrying in 5 seconds."
			sleep 5
			count=$(($count - 1))
		done

		echo "[ $(date ${date_format}) ] Mounting Google Drive with Plexdrive in mountpoint: ${cloud_dir}"
		screen -dmS plexdrive "$plexdrive_bin" --config="${plexdrive_dir}" $mongo $plexdrive_options "${cloud_dir}"
		echo "[ $(date ${date_format}) ] Mounted successfully with Plexdrive"
	else
		echo "[ $(date ${date_format}) ] Google Drive mountpoint: ${cloud_dir} already mounted."
	fi
}

mount_rclone () {
	# Make sure decrypted GD directory exists.
	if [ ! -d "${cloud_decrypt_dir}" ]; then
		mkdir -p "${cloud_decrypt_dir}"
	fi

	if ! mountpoint -q "$cloud_decrypt_dir"; then
		sleep 5
		count=5
		while [ -z "$(ls -A ${cloud_encrypt_dir})" ]
		do
			if [ "$count" == "0" ]; then
                                echo "[ $(date ${date_format}) ] Could not read mountpoint: ${cloud_encrypt_dir}"
                                echo "[ $(date ${date_format}) ] Mount failed"
                                exit 02
                        fi
			echo "[ $(date ${date_format}) ] Could not find encrypted mountpoint: ${cloud_encrypt_dir}. Retrying in 10 seconds."
			sleep 10
			count=$(($count - 1))
		done

		echo "[ $(date ${date_format}) ] Mounting decrypted Google Drive with Rclone in mountpoint: ${cloud_decrypt_dir}"
		"${rclone_bin}" mount --config="${rclone_config}" $rclone_mount_options "${rclone_local_endpoint}" "${cloud_decrypt_dir}" > /dev/null 2>&1 &
		echo "[ $(date ${date_format}) ] Mounted successfully with Rclone"
	else
		echo "[ $(date ${date_format}) ] Decrypted Google Drive mountpoint: ${cloud_decrypt_dir} already mounted."
	fi
}

mount_union () {
	# Make sure combined plex media directory exists.
	if [ ! -d "${local_media_dir}" ]; then
		mkdir -p "${local_media_dir}"
	fi

	# Mount plex media directory if not already mounted.
	if ! mountpoint -q "${local_media_dir}"; then
		sleep 5
		count=5
		while [ -z "$(ls -A ${cloud_decrypt_dir})" ]
		do
			if [ "$count" == "0" ]; then
                                echo "[ $(date ${date_format}) ] Could not read mountpoint: ${cloud_decrypt_dir}"
                                echo "[ $(date ${date_format}) ] Mount failed"
                                exit 02
                        fi
			echo "[ $(date ${date_format}) ] Could not find decrypted mountpoint: ${cloud_decrypt_dir}. Retrying in 10 seconds."
			sleep 10
			count=$(($count - 1))
		done

		ufs_mounts="${local_decrypt_dir}=RW:${cloud_decrypt_dir}=RO"
		#Mfs can delete from cloud even if set to RO.
		mfs_mounts="${local_decrypt_dir}:${cloud_decrypt_dir}"
		
		if [ "$pool_choice" -eq "0" ]; then
			echo "[ $(date ${date_format}) ] Mounting final library with UnionFS in mountpoint: ${local_media_dir}"
			"${ufs_bin}" $ufs_options "${ufs_mounts}" "${local_media_dir}"
			echo "[ $(date ${date_format}) ] Mounted successfully with UnionFS"
		fi

		if [ "$pool_choice" -eq "1" ]; then
			echo "[ $(date ${date_format}) ] Mounting final library with MergerFS in mountpoint: ${local_media_dir}"
			"${mfs_bin}" $mfs_options "${mfs_mounts}" "${local_media_dir}"
			echo "[ $(date ${date_format}) ] Mounted successfully with MergerFS"
		fi
		
	else
		echo "[ $(date ${date_format}) ] Final library mountpoint: ${local_media_dir} already mounted."
	fi
}

###############################################################################
echo "[ $(date ${date_format}) ] ###### Start Mount ######"
echo "[ $(date ${date_format}) ] ###### Checking Permissions ######"
check_permissions
mount_plexdrive
if [ "$encrypt_media" != "0" ]; then
	mount_rclone
else
	echo "[ $(date ${date_format}) ] No encryption. Skipping Rclone mount."
fi
mount_union
echo "[ $(date ${date_format}) ] ###### Mounted successfully ######"
