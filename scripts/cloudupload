#!/bin/bash
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config
########## CONFIGURATION ##########
. "INSERT_CONFIG_FILE"
###################################

##############################################################################
# Set Move/Copy based on move_ind
if [ "${move_ind}" = "1" ]; then
        copy_cmd="move"
else
        copy_cmd="copy"
fi

# If script is already running; abort.
if pidof -o %PPID -x "$(basename "$0")"; then
        echo "[ $(date ${date_format}) ] Upload already in progress. Aborting."
        exit 3
fi

echo "[ $(date ${date_format}) ] ###### Start cloud upload ######"
oldSize=0
addedSize=0
fileSize=0
cloud_up_limit=$((${upload_limit}*1073741824))

# Check if any files exist, if not exit
file_ct=$(find "${local_decrypt_dir}" -type f | wc -l)

if [ "$file_ct" = 0 ];then
        echo "[ $(date ${date_format}) ] Nothing to upload, exiting"
        exit 3
fi

# Generate filelist and iterate through it...

find "${local_decrypt_dir}" -type f -print0 | xargs -0 stat --format '%Y :%y %n' | sort -nr | cut -d: -f2- | awk '{$1=$2=$3=""; print $0}' |
(
        while read -r n; do
                # Find the pathname relative to the root of your remote and store filename
                filename="$(echo "$n" | sed -e s@"${local_decrypt_dir}"@@)"
                destpath="$(dirname "$n" | sed -e s@"${local_decrypt_dir}"@@)"
                basefile="$(basename "$n")"

                # Skip hidden or partial files.
                case "$n" in
                        (*.partial~) continue ;;
                        (*_HIDDEN~) continue ;;
                        (*.QTFS) continue ;;
                        (*.fuse*) continue ;;
                        (*.inProgress*) continue ;;
                        (.DS_STORE) continue ;;
                esac

                if [ -f "${cloud_decrypt_dir}${filename}" ]; then
            continue
        fi
                # If file is opened by another process, wait until it isn't.
                while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
                        [ "$(lsof "${local_decrypt_dir}/${n}" >/dev/null 2>&1)" ] || \
                        [ "$(lsof "${local_media_dir}/${n}" >/dev/null 2>&1)" ]; do
                        echo "[ $(date ${date_format}) ] File -> ${n} in use. Retrying in 10 seconds."
                        sleep 10
                done

                fileSize=$(stat "$n" -c %s)
                addedSize=$(($addedSize+$fileSize))

                if [[ "$cloud_up_limit" -gt "0" ]]; then
                        if [[ "$addedSize" -gt "$cloud_up_limit" ]]; then
                                echo "[ $(date ${date_format}) ] Aborted upload to not exceed $(numfmt --to=iec $cloud_up_limit --suffix=B --format=""%.2f"")."
                                echo "[ $(date ${date_format}) ] $(numfmt --to=iec $oldSize --suffix=B --format=""%.2f"") uploaded"
                break
                        fi
                fi
                # Copy/Move file to remote destination[s], retaining path
                "${rclone_bin}" "${copy_cmd}" --config="${rclone_config}" $rclone_options "$n" "${rclone_cloud_endpoint}${destpath}"
                echo "[ $(date ${date_format}) ] Uploaded $(numfmt --to=iec $fileSize --suffix=B --format="%.2f") - $basefile"
        diffSize=$((addedSize-oldSize))
        done
echo "[ $(date ${date_format}) ] Total of $(numfmt --to=iec $addedSize --suffix=B --format="%.2f") uploaded."
echo "[ $(date ${date_format}) ] ###### Cloud upload ended successfully ######"
)
